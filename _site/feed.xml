<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>FullGC</title>
    <description>The FullGC blog. Practical guides for the Backend guy. We speak Scala, Java and DevOps</description>
    <link>http://fullgc.github.io/</link>
    <atom:link href="http://fullgc.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 12 Apr 2019 23:09:51 +0300</pubDate>
    <lastBuildDate>Fri, 12 Apr 2019 23:09:51 +0300</lastBuildDate>
    <generator>Jekyll v3.7.4</generator>
    
      <item>
        <title>Syncing Kubernetes and Hashicorp Consul</title>
        <description>&lt;p&gt;If you’re using Consul for service discovery/DNS and using or planning to use Kubernetes, then the recently announced integration between Hashicorp Consul and Kubernetes will come as welcome news!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/xXR5gri6PhaGM4U2OMurfQ_img_0.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The syncing can be done by running a process that is not part of the Kubernetes cluster itself; in Hashicorp’s&lt;a href=&quot;https://github.com/hashicorp/consul-k8s&quot;&gt; consul-k8s project&lt;/a&gt;, or, preferably, by installing the&lt;a href=&quot;https://www.consul.io/docs/platform/k8s/run.html&quot;&gt; Consul-Helm&lt;/a&gt; Chart.&lt;/p&gt;

&lt;p&gt;Hashicorp released a Consul-Helm Chart for installing, configuring, and upgrading Consul on Kubernetes.&lt;/p&gt;

&lt;p&gt;There are decisions to be made regarding the nature of the syncing, but the first step would always be to clone the&lt;a href=&quot;https://github.com/hashicorp/consul-helm.git&quot;&gt; Consul-Helm project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before installing the Helm Chart, let’s review some of the essential configurations that are found in the standard helm values file, “values.yaml”.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;configure-consul-helm&quot;&gt;Configure consul-helm&lt;/h3&gt;

&lt;p&gt;By default, the Chart resolution installs everything: a Consul server cluster, client agents on all nodes, and feature components.&lt;/p&gt;

&lt;p&gt;If you already maintain a Consul cluster and are interested in joining the Kubernetes services to your existing cluster, then in the “server” section, the “enable” property in the “server” section should be set to “false”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/xXR5gri6PhaGM4U2OMurfQ_img_1.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll also need to enable the Consul client and tell it what the Consul-server address is, so it can join the cluster:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/xXR5gri6PhaGM4U2OMurfQ_img_2.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll also need to specify the datacenter:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/xXR5gri6PhaGM4U2OMurfQ_img_3.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we have to choose whether to sync to Kubernetes or Consul (or both!).&lt;/p&gt;

&lt;p&gt;Sync to Consul means that the Kubernetes services will appear in the Consul catalog, and they could be available via HTTP or Consul-DNS. Later on, we’ll describe how to configure that.&lt;/p&gt;

&lt;p&gt;If you already maintain a Consul cluster, you probably want to sync to Consul.&lt;/p&gt;

&lt;p&gt;Sync to Kubernetes means that services in Consul can be made available as first-class Kubernetes services, and thus able to access them through Kubernetes Core-DNS or with any Kubernetes way. If you are not planning on using it, you might want to set the sync to Kubernetes to “false”, since you might get lost with all the Consul services that would suddenly appear as Kubernetes’ components. If you enable it for every namespace, well, it can really get messy.&lt;/p&gt;

&lt;p&gt;For example, in the image below we’ll define a syncing to Consul and not to Kubernetes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/xXR5gri6PhaGM4U2OMurfQ_img_4.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I recommend going over the entire “values.yaml” file and set the relevant values.&lt;/p&gt;

&lt;p&gt;Now for the installation itself:&lt;/p&gt;

&lt;p&gt;Clone the repository from&lt;a href=&quot;https://github.com/hashicorp/consul-helm&quot;&gt; here&lt;/a&gt; and perform “helm install”.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;accessing-the-consul-http-api&quot;&gt;Accessing the Consul HTTP API&lt;/h3&gt;

&lt;p&gt;Access to the Consul HTTP API is through the consul-agent, Pod, we’ve created.&lt;/p&gt;

&lt;p&gt;Every Node has a Consul agent, and there are a couple of ways to expose access to them.&lt;/p&gt;

&lt;p&gt;One way is to create a Nodeport service. A Nodeport defines a static port, meaning that it opens a specific port on all nodes so any traffic from the outside to this port would get to this service.&lt;/p&gt;

&lt;p&gt;The service, in turn, would forward traffic to an application labeled “consul”, which is a Consul agent.&lt;/p&gt;

&lt;p&gt;Below is an example of such Consul Service.
‘Kubectl apply’ it to spin the service.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;consul&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;consul-http-api&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;lt;namespace&amp;gt;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;consul&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hasDNS&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;consul&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http-api&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;TCP&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8500&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8500&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NodePort&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;configure-the-consul-domain-with-the-coredns&quot;&gt;Configure the Consul domain with the CoreDNS&lt;/h3&gt;

&lt;p&gt;CoreDNS is a DNS server that commonly serves as the Kubernetes cluster DNS.
It can be configured via its “Corefile”, which is defined in the “coredns” ConfigMap.
If we like to use the Consul-DNS to call our external Consul services from a Kubernetes component (instead of or along the CoreDNS addresses for Kubernetes services), we’ll need to configure Consul in the “Corefile” section.&lt;/p&gt;

&lt;p&gt;In the CoreDNS .yaml file below, the “consul:53” section is what we are interested in.&lt;/p&gt;

&lt;p&gt;To force all non-cluster DNS lookups to go through our consul-sync Kubernetes service so we will be able to use the Consul names.
The key “consul:53” means that names that end with the string “consul” will go through the consul-sync service.
Since the address of the Consul services is of this template:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;service name&amp;gt;.service.&amp;lt;datacenter name&amp;gt;.consul
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is exactly what we want.&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ConfigMap&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;coredns&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-system&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;Corefile&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
   &lt;span class=&quot;no&quot;&gt;.:53 {&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;errors&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;log&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;health&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;kubernetes cluster.local 10.0.0.0/24&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;prometheus :9153&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;proxy . /etc/resolv.conf&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;cache 30&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;reload&lt;/span&gt;
   &lt;span class=&quot;no&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;no&quot;&gt;consul:53 {&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;log&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;errors&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;cache 30&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;proxy . ${CONSUL_DNS_SERVER_ADDR} {&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;# policy round_robin&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;# health_check /health:8080&lt;/span&gt;
       &lt;span class=&quot;no&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;no&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Note that we configured “proxy”. Any queries that are not within the cluster domain of Kubernetes will be forwarded to predefined resolvers, in our case the Consul service.&lt;/p&gt;

&lt;p&gt;The address of the Consul service can be invoked with this script:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CONSUL_DNS_SERVER_ADDR=kubectl get svc consul-sync-dns -o jsonpath='{.spec.clusterIP}' -n &amp;lt;namespace&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To reconfigure CoreDNS with the additionals to the ConfigMap, perform:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get pods -n kube-system -oname |grep coredns |xargs kubectl apply -f kube-system

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Configurations of the Consul-K8s sync components are implemented as Jenkins-Pipeline methods on my &lt;a href=&quot;https://github.com/FullGC/consul-kubernetes-sync-Pipeline&quot;&gt;GitHub&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Apr 2019 17:30:45 +0300</pubDate>
        <link>http://fullgc.github.io/syncing-kubernetes-and-hashicorp-consul/</link>
        <guid isPermaLink="true">http://fullgc.github.io/syncing-kubernetes-and-hashicorp-consul/</guid>
        
        <category>kubernetes</category>
        
        <category>consul</category>
        
        <category>hashicorp</category>
        
        
      </item>
    
      <item>
        <title>Terraform synced-state validation</title>
        <description>&lt;p&gt;Working with Terraform brings up some challenges. We are to focus on two of them:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Keeping Terraform’s state consistent with the actual provider (i.e, a cloud provider) resources can be quite a challenge. Such inconsistencies are usually a result of changes performed directly in the cloud environment.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Keep the Terraform code synced with the Terraform state. When we like to apply changes in 	Terraform, we can:&lt;/p&gt;

    &lt;p&gt;a. Start by pushing the changes to the Terraform repository and then apply them. The Terraform state will be behind until the changes are affected.&lt;/p&gt;

    &lt;p&gt;b. Start by applying the changes locally, then push them. The Terraform state will be ahead until the code is pushed.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The first can be mostly avoided if we forbid manual actions that could have been done by Terraform, but not entirely.&lt;/p&gt;

&lt;p&gt;The real issue with the second is that after the first action (apply/push), Terraform will be out of sync. If the second action is delayed or not happening, the undesired inconsistent state will be kept.&lt;/p&gt;

&lt;p&gt;To ensure eventual consistency here, you can automate the workflow with an automation framework (i.e. Jenkins).&lt;/p&gt;

&lt;p&gt;However, we, the Fyber DevOps team, wanted to avoid such an automation process because we thought it would become a delaying factor, and we still manage to keep Terraform state synced with the code and the actual resources.&lt;/p&gt;

&lt;p&gt;We do it with a little help of a Jenkins &lt;a href=&quot;https://jenkins.io/doc/book/pipeline/shared-libraries/&quot;&gt;pipeline library&lt;/a&gt; script. The script initials, updates, and executes a ‘terraform plan’ command. If Terraform isn’t synced, it reports the unsynced components to the dedicated Slack channel. The Jenkins job is scheduled to run in the first and before the last working hour, on each of the Terraform environments, so we’ll be able to fix any inconsistency by the end of the day.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/F57qdjJQzC92gHvkkvffA_img_0.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The script can be found on my &lt;a href=&quot;https://github.com/FullGC/Terraform-Empty-Plan-Validator&quot;&gt;GitHub&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;It’s important to note that the script is useful when you’re working with the Terraform Recommended Workflow, specifically when having an environment file for each environment that defines the Terraform modules, while the resources lie in their own repository.&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Apr 2019 17:15:45 +0300</pubDate>
        <link>http://fullgc.github.io/terraform-synced-state-validation/</link>
        <guid isPermaLink="true">http://fullgc.github.io/terraform-synced-state-validation/</guid>
        
        <category>terraform</category>
        
        <category>hashicorp</category>
        
        <category>devops</category>
        
        
      </item>
    
      <item>
        <title>Developing behavior-driven tests for JEE web applications with Jbehave - Part 3</title>
        <description>&lt;p&gt;&lt;i&gt;This post is the third of a three parts series of articles about Developing behavior-driven tests for JEE web applications with Jbehave&lt;/i&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/developing-behavior-with-jbehave-part-1&quot;&gt;Part-1: Terminology, Tools and the ‘Volcano’ stories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/developing-behavior-with-jbehave-part-2&quot;&gt;Part-2: Writing Stories and Java Implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/developing-behavior-with-jbehave-part-3&quot;&gt;Part-3: Automate the tests and generate reports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;part-3---automate-the-tests-and-generate-reports&quot;&gt;Part 3 - Automate the tests and generate reports&lt;/h2&gt;

&lt;p&gt;Previously, we implemented the step cases in a Java code.
In this part we’ll learn how to automate them and generate informative reports at the end of the run.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;identify-implementation-methods&quot;&gt;Identify implementation methods&lt;/h3&gt;

&lt;p&gt;You may recall we mentioned that Jbehave registered the Java implementation methods on start up. But how does it identify an implementation step?&lt;/p&gt;

&lt;p&gt;Basically, these methods would have to override the configuration() method, which is part of the jbehave library. We have however, let ‘thucydides’ work for us. The ‘thucydides-core’ library (that comes with the ‘jbehave-plugin’), provides the ‘ThucydidesJUnitStories’ class. This identifies the ‘.story’ files and the links for the Java implementations. All we need is to have a Java class that inherits from it in the Java implementation root package:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;net.thucydides.jbehave.ThucydidesJUnitStories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApiBDDTestSuite&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ThucydidesJUnitStories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;final-project-structure&quot;&gt;Final project structure:&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/dB6XOsGGWuUM1t1RHDV3g_img_6.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;running-the-tests&quot;&gt;Running the tests&lt;/h3&gt;

&lt;p&gt;At this point, we can run the tests as Junit.&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;running-the-tests-manually&quot;&gt;Running the tests manually&lt;/h4&gt;

&lt;p&gt;In order for the black-box tests to pass, we need to have a server up and running. To run the tests with the IDE, right click on the ‘jbehave’ package.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/dB6XOsGGWuUM1t1RHDV3g_img_7.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this fashion, we can run the tests quickly, debugging them and the server.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;automate-the-tests-with-jettymaven-plugin&quot;&gt;Automate the tests with Jetty(Maven plugin)&lt;/h4&gt;

&lt;p&gt;What we really want is to test the Volcano server as part of the maven build, the ‘maven compile’ task.
In this case, we need maven to start a Volcano HTTP server, run the tests, and get Volcano down.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/jetty/&quot;&gt;Eclipse Jetty&lt;/a&gt; is an open-source project providing an HTTP server and javax.servlet container
We’ll use a Jetty maven-plugin, to start a Volcano server on which the tests will be running.&lt;/p&gt;

&lt;p&gt;The maven plugin should be configured as follows:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.eclipse.jetty&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;jetty-maven-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${jetty.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;httpConnector&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;port&amp;gt;&lt;/span&gt;8083&lt;span class=&quot;nt&quot;&gt;&amp;lt;/port&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;/httpConnector&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;scanIntervalSeconds&amp;gt;&lt;/span&gt;0&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scanIntervalSeconds&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;stopKey&amp;gt;&lt;/span&gt;stopApiTestEnv&lt;span class=&quot;nt&quot;&gt;&amp;lt;/stopKey&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;stopPort&amp;gt;&lt;/span&gt;9999&lt;span class=&quot;nt&quot;&gt;&amp;lt;/stopPort&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;jvmArgs&amp;gt;&lt;/span&gt;-Xms1024m -Xmx2048m -XX:PermSize=256M -XX:MaxPermSize=512M&lt;span class=&quot;nt&quot;&gt;&amp;lt;/jvmArgs&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;contextHandlers&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;contextHandler&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;implementation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.eclipse.jetty.maven.plugin.JettyWebAppContext&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;nt&quot;&gt;&amp;lt;war&amp;gt;&lt;/span&gt;${project.basedir}/../volcano_core/target/volcano_core-1.2-SNAPSHOT.war&lt;span class=&quot;nt&quot;&gt;&amp;lt;/war&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;nt&quot;&gt;&amp;lt;contextPath&amp;gt;&lt;/span&gt;/volcano&lt;span class=&quot;nt&quot;&gt;&amp;lt;/contextPath&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;/contextHandler&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;/contextHandlers&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;executions&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;start-jetty&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;pre-integration-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;start&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;execution&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;id&amp;gt;&lt;/span&gt;stop-jetty&lt;span class=&quot;nt&quot;&gt;&amp;lt;/id&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;phase&amp;gt;&lt;/span&gt;post-integration-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/phase&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;goals&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;nt&quot;&gt;&amp;lt;goal&amp;gt;&lt;/span&gt;stop&lt;span class=&quot;nt&quot;&gt;&amp;lt;/goal&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;/goals&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;/execution&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/executions&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The server’s port needs to be available, you may want to declare a different port from the default that your server is using.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The memory you declare allocated with the jvmargs needs to be enough to get the server up&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In ‘contextHandlers’ we provide the web application archive to be used. If you have multiple web modules in your project that need to be tested, provide them all.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In the executions section we tell jetty to start before the tests are executed and stop afterwards. If we don’t explicitly ask that, then the jetty would stay up.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;test-summary-reports&quot;&gt;Test Summary Reports&lt;/h3&gt;

&lt;p&gt;Test Summary Reports are an important deliverable. They are needed to reflect test results in a clear way, allowing them to be analyzed quickly.&lt;/p&gt;

&lt;p&gt;Jbehave &lt;a href=&quot;https://jbehave.org/reference/stable/reporting-stories.html&quot;&gt;storyReporter&lt;/a&gt; supports many report formats and will generate the reports for each step and story automatically after the tests have been completed in the /target/jbehave folder.&lt;/p&gt;

&lt;p&gt;We’ll use another Thucydides maven plugin to generate some better-looking reports:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.apache.maven.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-site-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;3.2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;reportPlugins&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;plugin&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.thucydides.maven.plugins&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;maven-thucydides-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;${thucydides.version}&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
       &lt;span class=&quot;nt&quot;&gt;&amp;lt;/reportPlugins&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/plugin&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This will generate various reports automatically at the end of the Maven run, in /target/site.&lt;/p&gt;

&lt;p&gt;The ‘index.html’ file that has been created is the most comprehensive, interactive report:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/dB6XOsGGWuUM1t1RHDV3g_img_8.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A click on the ‘change password’ test (story) for example, would provide some additional data on each step result.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/dB6XOsGGWuUM1t1RHDV3g_img_9.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can zoom in with a click on the various test components to get results and statistics.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h3&gt;

&lt;p&gt;Behavior Driven Development is a methodology for developing software through example-based communication among developers, QAs, and project managers.&lt;/p&gt;

&lt;p&gt;With Jbehave, this means writing Given-When-Then scenarios to illustrate examples in a plain text, which links to Java implementation methods.&lt;/p&gt;

&lt;p&gt;As part of our mission to create Blackbox tests in a BDD fashion for the Volcano application, we’ve covered some test cases, discussed design and challenges, and reviewed some post-compilation reports.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;The complete code can be found in my &lt;a href=&quot;https://github.com/FullGC/volcano&quot;&gt;GitHub&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Dec 2018 16:15:45 +0200</pubDate>
        <link>http://fullgc.github.io/developing-behavior-with-jbehave-part-3/</link>
        <guid isPermaLink="true">http://fullgc.github.io/developing-behavior-with-jbehave-part-3/</guid>
        
        <category>jee</category>
        
        <category>java</category>
        
        <category>jbehave</category>
        
        <category>bdd</category>
        
        <category>automation</category>
        
        <category>tests</category>
        
        
      </item>
    
      <item>
        <title>Developing behavior-driven tests for JEE web applications with Jbehave - Part 2</title>
        <description>&lt;p&gt;&lt;i&gt;This post is the second of a three parts series of articles about Developing behavior-driven tests for JEE web applications with Jbehave&lt;/i&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/developing-behavior-with-jbehave-part-1&quot;&gt;Part-1: Terminology, Tools and the ‘Volcano’ stories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/developing-behavior-with-jbehave-part-2&quot;&gt;Part-2: Writing Stories and Java Implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/developing-behavior-with-jbehave-part-3&quot;&gt;Part-3: Automate the tests and generate reports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;part-2---writing-stories-and-java-implementation&quot;&gt;Part 2 - Writing Stories and Java Implementation&lt;/h2&gt;
&lt;p&gt;Following is a discussion of some Volcano test cases and their Java implementation.&lt;/p&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;registration-story&quot;&gt;Registration story&lt;/h3&gt;

&lt;p&gt;Let’s zoom in on the first story, which is the Volcano registration story file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Narrative:
As a Volcano enthusiast Dani would like to register to Volcano social network

Scenario: A new user is signing up for the Volcano system
Given dani shemesh is a Volcano enthusiast
When dani is signing up for Volcano with the user-name: dani and the password: 123456
Then dani is able to log in with the user-name: dani and the password: 123456
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the story is written in the third person. This will let us capture the subject (i.e. the user) later.&lt;/p&gt;

&lt;p&gt;The ‘Given’ is linked with a Java method. The method should:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Carry the Jbehave @Given annotation&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The String parameter of the annotation should match the text described in the step, while the user name (i.e.)  ‘dani shemesh’ is replaced with a variable $user&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In order to capture the user parameter, the function receives a String parameter, following the @Named annotation&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The @Given implementation of this scenario is a dummy for obvious reasons.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserAccount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Cache&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Given&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$user is a Volcano enthusiast&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;let &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;be a volcano enthusiast&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Next is the implementation of the registration step where we cache the user details:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@When&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$user is signing up for Volcano with the user-name: $user and the password: $password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;newUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;RequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the verification step, where the user should be able to log in and have a live token.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Then&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$user is $ableorNot to log in with the user-name: $user and the password: $password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ableorNotAble&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ableOrNot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ableOrNot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;able&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)){&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;implementation-challenges&quot;&gt;Implementation challenges&lt;/h4&gt;

&lt;p&gt;Note that, we have used a cache to store the new user’s details in the registration step.&lt;/p&gt;

&lt;p&gt;Considering other future user actions, like “change password” and “add a friend”, the user will be required to be logged-in, means that this would be a given step:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Given&lt;/strong&gt; dani is logged in&lt;/p&gt;

&lt;p&gt;Now, we like to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Re-use the java implementation of the log-in method (reuse @Given methods)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Avoid creating a new user and log-in before each scenario  (reuse @When actions)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This brings up unexpected challenges from an OOP point of view. Before discussing them, let’s explain why&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;the-jbehave-environment&quot;&gt;The Jbehave environment&lt;/h4&gt;
&lt;p&gt;&lt;img src=&quot;/img/oop_meme.png&quot; height=&quot;190&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Though we are writing in Java, we are not in an OOP scope, but in Jbehave’s.&lt;/p&gt;

&lt;p&gt;When JBehave starts up, it registers all the implemented methods and their parameters, then reads the steps in each scenario for each story and maps them to the appropriate method in the code behind. Here all their values are in memory and are executed one by one. The memory is cleaned after each story.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;re-use-the-given-methods&quot;&gt;Re-use the @Given methods&lt;/h4&gt;

&lt;p&gt;This one is easy. Instead of inheritance/composition, we can place the @Given methods wherever we like, and Jbehave will identify it. So, we’ll create a dedicated class for given methods, dealing with user scenarios:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GivenUserSteps&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Cache&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Given&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$user is a Volcano enthusiast&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;let &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;be a volcano enthusiast&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Given&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$user is logged in&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;logIn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;implement-tests-for-similar-entities-in-the-same-class&quot;&gt;Implement tests for similar entities in the same class&lt;/h5&gt;

&lt;p&gt;We can once again take advantage of the Jbehave environment to place test implementations with similar characters together, even if they implement steps of different stories, for example:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserAccount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;Cache&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@When&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$user is signing up for Volcano with the user-name: $user and the password: $password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;newUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;RequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@When&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$user is changing his password to $newPassword&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;changePassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;newPassword&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;changePassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;…&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h5 id=&quot;re-use-actions-with-dependency-injection-using-spring&quot;&gt;Re-use actions with Dependency Injection using Spring&lt;/h5&gt;

&lt;p&gt;In order to reuse actions, in our case the user that we have created and logged in with, in the “registration” step, we need to cache. We cannot put the cache in a global variable or static at some place, since we are working with different classes and the memory cleans up after each story.&lt;/p&gt;

&lt;p&gt;Luckily, &lt;a href=&quot;https://jbehave.org/reference/latest/dependency-injection.html&quot;&gt;Jbehave supports some of the most popular, Java based, dependency injection plugins&lt;/a&gt;. The most popular is probably Spring, and we’ll use it to inject the resources (i.e. the cache) we need for reusing actions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/public/dB6XOsGGWuUM1t1RHDV3g_img_5.png&quot; height=&quot;190&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;

&lt;h6 id=&quot;configure-spring&quot;&gt;Configure Spring&lt;/h6&gt;

&lt;p&gt;We’ll use ‘org.springframework’ artifacts for the Spring integration:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-context&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To make our test classes to be singleton spring beans, using the @Service annotation&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;to identify the test classes beans under  com.fullgc.jbehave namespace, using @ContextConfiguration annotation and a spring-context xml file.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;* &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-beans&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To inject the resources to the test classes, using the @Autowired annotation&lt;/p&gt;

&lt;p&gt;And the following Thucydides artifact&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.thucydides&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;thucydides-junit&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For the integration of the bean classes and with Jbehave, using SpringIntegration class.&lt;/p&gt;

&lt;p&gt;The UserAccount test class now looks like this:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ContextConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/spring-context.xml&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserAccount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Rule&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringIntegration&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;springIntegration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SpringIntegration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;CacheBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@When&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$user is signing up for Volcano with the user-name: $user and the password: $password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;newUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;RequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createUser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;nd&quot;&gt;@When&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;$user is changing his password to $newPassword&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;  &lt;span class=&quot;nf&quot;&gt;changePassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Named&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;newPassword&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestDispatcher&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;changePassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponseBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;
           &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newPassword&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that the new user is cached and reused for a “change password” action.&lt;/p&gt;

&lt;p&gt;(We use the cache in the same fashion as the ‘add friend’ story, which we won’t cover here, but can be found in the ‘Volcano’ repository)&lt;/p&gt;

&lt;p&gt;The other test classes should be modified in a similar fashion.&lt;/p&gt;

&lt;p&gt;The spring context:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;beans&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;xmlns:context=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/context&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;xmlns:task=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/task&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

   &lt;span class=&quot;nt&quot;&gt;&amp;lt;context:component-scan&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;base-package=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.fullgc.jbehave&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;task:annotation-driven&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/beans&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;next&quot;&gt;Next&lt;/h3&gt;
&lt;p&gt;In &lt;a href=&quot;https://fullgc.github.io/developing-behavior-with-jbehave-part-3&quot;&gt;Part-3&lt;/a&gt; we’ll learn how to launch the web app in compile time, run the tests and generate summary reports.&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Dec 2018 16:10:45 +0200</pubDate>
        <link>http://fullgc.github.io/developing-behavior-with-jbehave-part-2/</link>
        <guid isPermaLink="true">http://fullgc.github.io/developing-behavior-with-jbehave-part-2/</guid>
        
        <category>jee</category>
        
        <category>java</category>
        
        <category>jbehave</category>
        
        <category>bdd</category>
        
        <category>automation</category>
        
        <category>tests</category>
        
        
      </item>
    
      <item>
        <title>Developing behavior-driven tests for JEE web applications with Jbehave - Part 1</title>
        <description>&lt;p&gt;&lt;i&gt;This post is the first of a three parts series of articles about Developing behavior-driven tests for JEE web applications with Jbehave&lt;/i&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/developing-behavior-with-jbehave-part-1&quot;&gt;Part-1: Terminology, Tools and the ‘Volcano’ stories&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/developing-behavior-with-jbehave-part-2&quot;&gt;Part-2: Writing Stories and Java Implementation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/developing-behavior-with-jbehave-part-3&quot;&gt;Part-3: Automate the tests and generate reports&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;Behavior-driven development, or BDD, is an agile software development process that provides the developers, QA, project managers and business team with a shared tool-set and process for software development collaboration.&lt;/p&gt;

&lt;p&gt;In this guide, we’ll learn to design, develop and automate &lt;a href=&quot;https://en.wikipedia.org/wiki/Black-box_testing&quot;&gt;Black-box&lt;/a&gt; tests for a JEE web application in a &lt;a href=&quot;https://en.wikipedia.org/wiki/Behavior-driven_development&quot;&gt;BDD&lt;/a&gt; fashion. We’ll develop on top of &lt;a href=&quot;https://jbehave.org/&quot;&gt;Jbehave&lt;/a&gt; framework.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;part-1---terminology-tools-and-the-volcano-stories&quot;&gt;Part 1 - Terminology, Tools and the ‘Volcano’ stories&lt;/h2&gt;
&lt;hr /&gt;

&lt;h3 id=&quot;glossary&quot;&gt;Glossary&lt;/h3&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;black-box-testing&quot;&gt;Black-box testing&lt;/h4&gt;

&lt;p&gt;According to Wikipedia, “Black-box testing is a method of software testing that examines the functionality of an application without peering into its internal structures or workings”. As such, Black-box testing focuses entirely on the inputs and outputs of the software system – the “black box”.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4 id=&quot;behavior-driven-developmentbdd&quot;&gt;Behavior-driven development(BDD)&lt;/h4&gt;

&lt;p&gt;Behavior-driven development is an extension of &lt;a href=&quot;https://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;test-driven development&lt;/a&gt; that makes use of a simple, domain-specific scripting language.&lt;/p&gt;

&lt;p&gt;In BDD, you describe what you want the system to do by talking through example behavior. Work from the outside-in to implement those behaviors using examples to validate you’re what you’re building.&lt;/p&gt;

&lt;p&gt;The customer (who may be a Scrum Product Owner) describes what they want, and the developers ask questions to flesh out enough detail about the behavior to be able to implement it”. (&lt;a href=&quot;http://agilecoach.typepad.com/agile-coaching/2012/03/bdd-in-a-nutshell.html&quot;&gt;BDD in a nutshell&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Structure:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A BDD &lt;strong&gt;story&lt;/strong&gt; is a description of a requirement and its business benefit, and a set of criteria by which we all agree that it is “done”. There should be a story for each feature.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A Story consists of a &lt;strong&gt;narrative&lt;/strong&gt; and one or more &lt;strong&gt;scenarios&lt;/strong&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A narrative is a short, simple description of a feature told from &lt;em&gt;the perspective of a person or role that requires the new functionality&lt;/em&gt;. The narrative shifts the focus from writing features to discussing them (&lt;a href=&quot;https://technologyconversations.com/2013/11/17/behavior-driven-development-bdd-value-through-collaboration-part-2-narrative/&quot;&gt;technologyconversations.com&lt;/a&gt;).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A scenario consists of &lt;strong&gt;steps&lt;/strong&gt;, in the format of &lt;strong&gt;‘Given-When-Then’&lt;/strong&gt;. ‘Given’ and ‘When’ trigger actions, and ‘Then’ is the verification:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/dB6XOsGGWuUM1t1RHDV3g_img_0.jpg&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;frameworks-and-tools&quot;&gt;Frameworks and Tools&lt;/h2&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;jbehave-in-a-nutshell&quot;&gt;Jbehave in a nutshell&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://jbehave.org/&quot;&gt;JBehave&lt;/a&gt; is an open-source framework for Behavior-Driven Development.&lt;/p&gt;

&lt;p&gt;It supports Java-based development, and plain English is used to form the story.&lt;/p&gt;

&lt;p&gt;The steps in the story are visually linked to a corresponding Java method:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/dB6XOsGGWuUM1t1RHDV3g_img_1.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;JBehave supports multiple mechanisms for parameter injection. In the above example, the ‘user’ and ‘password’ as arguments extracted from the @When step, with the @named annotation, following a natural order to the parameters in the annotated Java method.&lt;/p&gt;

&lt;p&gt;In addition, Jbehave provides an easy way to create more intelligent data types than these strings. There are multiple plugins for generating comprehensive and interactive reports.&lt;/p&gt;

&lt;p&gt;There are many (many!) advanced features that are worth checking out (see advanced topics in the &lt;a href=&quot;https://jbehave.org/reference/stable/reporting-stories.html&quot;&gt;Jbehave site&lt;/a&gt;); we’ll only be using a few of them. We’ll explain how Jbehave works at a lower level later.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;thucydides&quot;&gt;Thucydides&lt;/h3&gt;

&lt;p&gt;Thucydides is a tool designed to make writing automated acceptance tests easier.&lt;/p&gt;

&lt;p&gt;Thucydides and JBehave work well together. Thucydides uses simple conventions to make it easier to get started in writing and implementing JBehave stories. It reports on both JBehave and Thucydides steps, which can be seamlessly combined in the same class.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;requirements-and-tools&quot;&gt;&lt;strong&gt;Requirements and tools&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;There are JBehave plugins for IntelliJ-Idea and Eclipse. Both come with a custom JBehave Story Editor which provides a syntax highlighting, step hyperlink detection and link to corresponding Java method, step autocompletion, detecting both unimplemented steps and more. Hence, one of these IDE is required.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We use maven for import libraries, build, run and automated tests&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;You can download and follow the source code through the guide. The dispatcher of the ‘tests’ module is written in Scala. To run it you’ll need a Scala SDK.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jbehave-plugin-and-the-volcano-stories&quot;&gt;Jbehave Plugin and the ‘Volcano’ Stories&lt;/h3&gt;
&lt;hr /&gt;

&lt;p&gt;We use Idea IntelliJ-IDE with ‘Jbehave support’ plugin for writing the stories and the code behind.&lt;/p&gt;

&lt;h4 id=&quot;volcano&quot;&gt;Volcano&lt;/h4&gt;

&lt;p&gt;‘Volcano’ is intended to be a social network for Volcano enthusiasts.&lt;/p&gt;

&lt;p&gt;The project manager of ‘Volcano’ would like to add some basic features and behaviors:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;User account&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;
        &lt;p&gt;Registration to ‘Volcano’.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;Change password.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;User network&lt;/p&gt;

    &lt;ol&gt;
      &lt;li&gt;Add a new friend.&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Each feature will be described in it’s own Jbehave story file. Here is how the “Registration” story looks like before applying the ‘‘Jbehave support’’ plugin:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/dB6XOsGGWuUM1t1RHDV3g_img_2.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And after:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/dB6XOsGGWuUM1t1RHDV3g_img_3.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this stage the steps are marked in red, and we get a message when the mouse hovers that there is no Java method that linked with the steps.&lt;/p&gt;

&lt;h4 id=&quot;initial-dependencies&quot;&gt;Initial Dependencies&lt;/h4&gt;

&lt;p&gt;Here Thucydides kicks in.&lt;/p&gt;

&lt;p&gt;We’ll use ‘&lt;em&gt;net.thucydides’&lt;/em&gt; libraries for the implementation.&lt;/p&gt;

&lt;p&gt;The following Jbehave plugin artifact:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.thucydides&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;thucydides-jbehave-plugin&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This includes the Jbehave libraries that are required for the Java implementation code behind:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/dB6XOsGGWuUM1t1RHDV3g_img_4.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;‘Jbehave-core’ provides the basic Jbehave BDD building blocks: The @Given @When @Then Annotations, and the annotations responsible for the parameter injection (i.e. @Named) ‘Jbehave-junit-runner’ provides functionality for the story and scenarios lifecycle and reporting.&lt;/p&gt;

&lt;p&gt;Later on, we’ll use it to identify the stories and run the test.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;next&quot;&gt;Next&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&quot;https://fullgc.github.io/developing-behavior-with-jbehave-part-2&quot;&gt;Part-2&lt;/a&gt; we’ll implement the ‘Registration’ story, and review solutions to the implementation challenges.&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
var disqus_config = function () {
this.page.url = &quot;https://fullgc.github.io/developing-behavior-with-jbehave-part-1/&quot;
this.page.identifier = bdd-1
};
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://FullGC.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
</description>
        <pubDate>Wed, 19 Dec 2018 16:05:45 +0200</pubDate>
        <link>http://fullgc.github.io/developing-behavior-with-jbehave-part-1/</link>
        <guid isPermaLink="true">http://fullgc.github.io/developing-behavior-with-jbehave-part-1/</guid>
        
        <category>jee</category>
        
        <category>java</category>
        
        <category>jbehave</category>
        
        <category>bdd</category>
        
        <category>automation</category>
        
        <category>tests</category>
        
        
      </item>
    
      <item>
        <title>Manage development and delivery workflow with jGit-flow and Jenkins-Pipeline - Part 3</title>
        <description>&lt;p&gt;&lt;i&gt;This post is the third of a three parts series of articles about manage development and CI/CD workflow with jgit-flow and Pipeline&lt;/i&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-1&quot;&gt;Part-1: Tools and Planning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-2&quot;&gt;Part-2: Git workflow with JGit-Flow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-3&quot;&gt;Part-3: Development and delivery process with Jenkins Pipeline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;part-3-development-and-delivery-process-with-jenkins-pipeline&quot;&gt;Part 3: Development and delivery process with Jenkins Pipeline&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Pipeline+Plugin&quot;&gt;Pipeline plugin&lt;/a&gt;, allows users to implement a project’s entire build/test/deploy pipeline in a Jenkinsfile and stores that alongside their code.&lt;/p&gt;

&lt;p&gt;Before we’ll begin writing the Jenkinsfile, keep in mind that there are many ways to implement a CI/CD process. The flow we’ll discuss and implement is just one approach.
Moreover, there are usually multiple ways of writing a command in the Jenkinsfile: Native Groovy (Pipeline plugin DSL is groovy based), use a shell script, a Pipeline script code, external libraries, etc..&lt;/p&gt;

&lt;h3 id=&quot;multibranch-pipeline&quot;&gt;Multibranch Pipeline&lt;/h3&gt;

&lt;p&gt;In a &lt;a href=&quot;https://jenkins.io/doc/book/pipeline/multibranch/&quot;&gt;Multibranch Pipeline&lt;/a&gt; project, Jenkins automatically discovers, manages and executes Pipelines for branches which contain a Jenkinsfile in source control (It is possible to write a Pipeline script directly in the job configuration though). It enables an implementation of different Jenkinsfiles for different branches. However, here we’re going to implement a single Jenkinsfile for multiple branches.&lt;/p&gt;

&lt;h4 id=&quot;configuration&quot;&gt;Configuration&lt;/h4&gt;

&lt;p&gt;The entire definition of the Pipeline would be written in the Jenkinsfile, except the following: In the ‘Branch Source’ we’ll declare the source control and repository that we’ll work with (this can also be done with code). In addition, we’ll set the branch discovery strategy to “All Branches”, meaning the job would start for every modification of the repository (i.e. for every push).&lt;/p&gt;

&lt;p&gt;Then we’ll exclude the release and ‘hotfix’ branches (this will be explained later).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/l8Up2rOYZomboTh06PZE0A_img_8.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;writing-the-jenkinsfile-step-by-step&quot;&gt;Writing the Jenkinsfile, step-by-step&lt;/h3&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;context&quot;&gt;Context&lt;/h4&gt;
&lt;p&gt;The Pipeline job should be run on a dedicated Jenkins slave, ‘server CICD’, hence the script would be written inside a node context:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Server CICD'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;checkout&quot;&gt;Checkout&lt;/h4&gt;
&lt;p&gt;This step checkouts code from source control. Scm is a special variable which instructs the checkout step to clone the specific revision which triggers this Pipeline run.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Checkout'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;checkout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;$class&lt;/span&gt;           &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'GitSCM'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;branches&lt;/span&gt;         &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;branches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;extensions&lt;/span&gt;       &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extensions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'LocalBranch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;localBranch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;userRemoteConfigs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;scm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;userRemoteConfigs&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;build&quot;&gt;Build&lt;/h4&gt;

&lt;p&gt;a. &lt;strong&gt;Maven build&lt;/strong&gt;: We are using the maven build tool, and trigger a maven build with a shell command.
   We like to get a detailed report from Pipeline on a failure, including failed tests, links to them, and statistics. Moreover, we like the job status to become automatically ‘unstable’ if there were failed tests. These are provided by the &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Pipeline+Maven+Plugin&quot;&gt;Pipeline Maven plugin&lt;/a&gt;, which wraps the maven build command.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;withMaven&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;jdk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'JDK 8 update 66'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;maven&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Maven 3.0.5'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mvn -Dmaven.test.failure.ignore=true clean install&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/l8Up2rOYZomboTh06PZE0A_img_9.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;b. &lt;strong&gt;Handle build exceptions&lt;/strong&gt; and test failures:
 On maven build failure:&lt;/p&gt;

&lt;p&gt;If Pipeline checked out a feature branch (triggered by a push to a branch which starts with ‘ST-‘  ),  a notification email should be sent to the feature owner only. We’ll use the &lt;a href=&quot;https://wiki.jenkins.io/display/JENKINS/Mailer&quot;&gt;Mailer plugin&lt;/a&gt; for that.&lt;/p&gt;

&lt;p&gt;Otherwise, we like an email notification to be sent to all server members, and a notification to the slack channel as well (&lt;a href=&quot;https://jenkins.io/doc/pipeline/steps/slack/&quot;&gt;Slack plugin&lt;/a&gt;). This should include a list of the last Git commits with the committer name, so that we can get an idea of what code modification broke the build.&lt;/p&gt;

&lt;p&gt;If an exception has been thrown during the build, we like to:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Catch it&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Change the build status to ‘failure’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Send the appropriate notifications&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Throw the exception&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The final script for the build looks like this:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BRANCH_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Maven build'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//returns a set of git revisions with the name of the committer&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;NonCPS&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commitList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;currentBuild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;changeSets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
           &lt;span class=&quot;kd&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;entry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
               &lt;span class=&quot;nx&quot;&gt;changes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;${entry.commitId} - ${entry.msg} &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n by ${entry.author.fullName}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n&quot;&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;changes&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;nx&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;handleFailures&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ST-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Mailer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;notifyEveryUnstableBuild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;recipients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;emailextrecipients&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'RequesterRecipientProvider'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]),&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;sendToIndividuals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Send notification'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
               &lt;span class=&quot;nx&quot;&gt;mail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'server@fullgc.com'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                       &lt;span class=&quot;na&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Maven build failed for branch: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;BRANCH_NAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
                       &lt;span class=&quot;na&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;last commits are: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commitList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; (&amp;lt;$BUILD_URL/console|Job&amp;gt;)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
           &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;slackSend&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'server'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'warning'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Maven build failed for branch ${branch} &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;. &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;nlast Commits are: &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;commitList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;n (&amp;lt;$BUILD_URL/console|Job&amp;gt;)&quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;withMaven&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jdk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'JDK 8 update 66'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;maven&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Maven 3.0.5'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mvn -Dmaven.test.failure.ignore=true clean install&quot;&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;currentBuild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;UNSTABLE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
           &lt;span class=&quot;nx&quot;&gt;handleFailures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;buildFailure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;handleFailures&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
       &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;release-process&quot;&gt;Release process&lt;/h4&gt;
&lt;p&gt;&lt;img align=&quot;right&quot; src=&quot;/img/releasememe.png&quot; height=&quot;110&quot; width=&quot;230&quot; /&gt;
In this process, we’ll upload a tar (the maven build output) to s3, where the environment depends on the git branch we’re working on. The code would be placed in the ‘process’ step:&lt;/p&gt;

&lt;p&gt;a. &lt;strong&gt;Release tar name.&lt;/strong&gt; The release file is a tar file (the maven build output). Its name should represent the release version. The release version is found in the root pom.xml file, and we’ll extract it from there&lt;/p&gt;

&lt;p&gt;b. &lt;strong&gt;Release candidate tar name.&lt;/strong&gt; This is somewhat tricky.
On &lt;strong&gt;release/hotfix&lt;/strong&gt; only, we like to create a release candidate for QA.
The release candidate holds the name:&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;volcano&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;RC&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In our story, the first release candidate would be: ‘volcano-1.2.0-RC-1’(‘volcano-1.2.1-RC-1’ in the case of a hotfix).&lt;/p&gt;

&lt;p&gt;The RC number starts with 1. If a QA person found a bug, we’d need to fix it, and then increment the RC number, i.e. ‘volcano-1.2.0-RC-2’ and so on.&lt;/p&gt;

&lt;p&gt;We’ll use a text file with the current RC number to know what the next version should be for release. We then update the file, commit changes and create a new tart with the correct name.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pom&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'pom.xml'&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;XmlSlurper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pom&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tarName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;volcano-${version}-release-pack.tar.gz&quot;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Release'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;NonCPS&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;doesFileExist&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileExists&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'releases.txt'&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doesFileExist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;file releases.txt exists&quot;&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'releases.txt'&lt;/span&gt;
       &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileContents&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newTarVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;fileContents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;writeFile&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'releases.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newTarVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;new tar version is: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newTarVersion&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;file releases.txt does not exist&quot;&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;writeFile&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'releases.txt'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'releases.txt'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;release&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hotfix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;tarRCVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;newTarName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;volcano${version}-RC-${tarRCVersion}-release-pack.tar.gz&quot;&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;mv ./volcano/target/${tarName} ./viper/target/${newTarName}&quot;&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;tarName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;newTarName&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Commit and push releases file'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git remote set-url origin git@bitbucket.org:fullgc/volcano.git&quot;&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git add -A&quot;&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git commit -m 'update volcano version to '${tarRCVersion}&quot;&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git push&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note that we did exclude the release/hotfix branches. This allows a couple of team members to work on the branch when QA has made a rejection or there is a bug to fix, without the new version being released with every push.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;upload-tar-to-s3&quot;&gt;Upload tar to s3&lt;/h4&gt;
&lt;p&gt;We won’t implement the deployment process with the Pipeline script, and leave it for the deployment tool, ‘Chef’ for the sake of this illustration.
Chef will deploy a new volcano app, with the appropriate version in s3. This would require amazon s3 credentials.
For the upload itself, there is a pipeline script. Nevertheless, we’ll implement it here using
Amazon CLI commands, using the shell.&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;step&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Upload tar to s3 cli'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;withCredentials&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'AmazonWebServicesCredentialsBinding'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;credentialsId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;accessKeyVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'AWS_ACCESS_KEY_ID'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;secretKeyVariable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'AWS_SECRET_ACCESS_KEY'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;pip install --user awscli&quot;&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sudo apt-get -y install awscli&quot;&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws s3 cp ./volcano/target/${tarName} s3://fullgc/tars/&quot;&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;deployment-process&quot;&gt;Deployment process&lt;/h4&gt;
&lt;p&gt;We won’t be diving too deeply into how Chef performs a deployment, but suffice to say this: In order for Chef to know that there is a new ‘volcano’ version it needs to deploy, the version in the &lt;a href=&quot;https://docs.chef.io/environments.html&quot;&gt;environment&lt;/a&gt; (qa or development or production) file needs to be updated to the new version.&lt;/p&gt;

&lt;p&gt;a. First, we’ll check out the Chef repository and ‘cd’  in the environments directory which the environment files rely on.&lt;/p&gt;

&lt;p&gt;b. Replace the current version of the appropriate environment for the new version. This can be done by shell tools like jq. Here we’ll use Groovy.&lt;/p&gt;

&lt;p&gt;c. Commit and push changes&lt;/p&gt;

&lt;p&gt;d. Send a slack notification&lt;/p&gt;

&lt;p&gt;e. If the branch is develop or master, it removes the releases.txt file&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ST-'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Deploy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;incrementVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nx&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;branch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'develop'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'development.json'&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'master'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'production.json'&lt;/span&gt;
             &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;
         &lt;span class=&quot;na&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'qa.json'&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;environmentFileContent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;readFile&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;environment&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;environmentJson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;groovy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JsonSlurper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parseText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;environmentFileContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;environmentJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;default_attributes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;volcano&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;volcano-${version}&quot;&lt;/span&gt;
   &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;environmentPrettyJsonString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;groovy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;JsonBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;environmentJson&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toPrettyString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;environmentJson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;writeFile&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;$environment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;environmentPrettyJsonString&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git commit -am 'Changed volcano version in $environment env to '${version}&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;git push&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;checkout&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;changelog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;poll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;scm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'GitSCM'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'BitbucketWeb'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;repoUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://bitbucket.org/fullgc/chef'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;doGenerateSubmoduleConfigurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;extensions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;$class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'LocalBranch'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;localBranch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'**'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]],&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;submoduleCfg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;userRemoteConfigs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'git@bitbucket.org:fullgc/chef'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]]&lt;/span&gt;
   &lt;span class=&quot;nx&quot;&gt;dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'environments/'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;nx&quot;&gt;incrementVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;slackSend&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;channel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'server'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'good'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot; New volcano version ${version} is being deployed to $environment&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'develop'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;branch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'master'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sh&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;rm releases.txt&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the image below an example of a Pipeline run:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/l8Up2rOYZomboTh06PZE0A_img_10.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;tips&quot;&gt;Tips&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;To save a lot of time, use the &lt;a href=&quot;https://jenkins-prod.inner-active.mobi/job/DevOps/job/Terraform/job/Clean_Validation/pipeline-syntax/&quot;&gt;Pipeline Syntax&lt;/a&gt; for every pipeline command&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;While working on the Jenkinsfile, you don’t have to commit and push every modification just to test an execution. You can use run an execution using &lt;a href=&quot;https://jenkins.io/doc/book/pipeline/development/#replay&quot;&gt;‘replay’&lt;/a&gt; until everything works.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://jenkins.io/doc/book/blueocean/&quot;&gt;Jenkins Blue Ocean&lt;/a&gt; plugin provides a new awesome user experience, check it out.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pipeline is still new, but you shouldn’t get too frustrated by weird errors you may get while writing the script, most of them are common and the solution can be easily found on the web.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The &lt;a href=&quot;https://github.com/jenkinsci/JenkinsPipelineUnit/&quot;&gt;Pipeline Unit Testing&lt;/a&gt; Framework allows you to unit test Pipelines before running them in full.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h3&gt;

&lt;p&gt;Pipeline as a code is pretty much a game changer, in the sense that it is now in the hands of every programmer, allowing them to write a full release (and deployment) process, that can fit the development workflow easily.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;em&gt;The complete code can be found in my &lt;a href=&quot;https://github.com/FullGC/volcano&quot;&gt;GitHub&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
var disqus_config = function () {
this.page.url = &quot;https://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-3/&quot;
this.page.identifier = workflow-3
};
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://FullGC.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
</description>
        <pubDate>Tue, 11 Sep 2018 17:15:45 +0300</pubDate>
        <link>http://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-3/</link>
        <guid isPermaLink="true">http://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-3/</guid>
        
        <category>jira</category>
        
        <category>jenkins</category>
        
        <category>pipeline</category>
        
        <category>ci/cd</category>
        
        <category>release</category>
        
        <category>deployment</category>
        
        
      </item>
    
      <item>
        <title>Manage development and delivery workflow with jGit-flow and Jenkins-Pipeline - Part 2</title>
        <description>&lt;p&gt;&lt;i&gt;This post is the second of a three parts series of articles about manage development and CI/CD workflow with jgit-flow and Pipeline&lt;/i&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-1&quot;&gt;Part-1: Tools and Planning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-2&quot;&gt;Part-2: Git workflow with JGit-Flow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-3&quot;&gt;Part-3: Development and delivery process with Jenkins Pipeline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;part-2-git-workflow-with-jgit-flow&quot;&gt;Part 2: Git workflow with JGit-Flow:&lt;/h2&gt;

&lt;p&gt;The Git workflow is based on ‘git-flow’, with some modifications, and implemented here with ‘Jgit-flow-jira’.&lt;/p&gt;

&lt;p&gt;This section covers the green and purple steps in the workflow graph (&lt;a href=&quot;https://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-1&quot;&gt;from part-1&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;The following is the basic plugin configuration needed for our story. It gives a name to the Git branches and tags. 
The ‘scmCommentPrefix’ would be the prefix for the commits performed by ‘jGit-flow’(i.e. the Git ‘squash’ operation)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;configuration&amp;gt;
  &amp;lt;flowInitContext&amp;gt;
     &amp;lt;masterBranchName&amp;gt;master&amp;lt;/masterBranchName&amp;gt;
     &amp;lt;developBranchName&amp;gt;develop&amp;lt;/developBranchName&amp;gt;
     &amp;lt;featureBranchPrefix&amp;gt;ST-&amp;lt;/featureBranchPrefix&amp;gt;
     &amp;lt;releaseBranchPrefix&amp;gt;release-&amp;lt;/releaseBranchPrefix&amp;gt;
     &amp;lt;hotfixBranchPrefix&amp;gt;hotfix-&amp;lt;/hotfixBranchPrefix&amp;gt;
     &amp;lt;versionTagPrefix&amp;gt;volcano&amp;lt;/versionTagPrefix&amp;gt;
  &amp;lt;/flowInitContext&amp;gt;
  &amp;lt;scmCommentPrefix&amp;gt;JgitFLow step: &amp;lt;/scmCommentPrefix&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;a-feature-lifecycle&quot;&gt;A Feature Lifecycle:&lt;/h3&gt;

&lt;h4 id=&quot;start-a-feature-git-flow-process&quot;&gt;Start a feature git flow process&lt;/h4&gt;

&lt;p&gt;A new feature starts with the command &lt;i&gt;mvn jgitflow:feature-start&lt;/i&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This prompts the user for the feature-branch name, which should carry the ticket ID (in our story, ‘ST-145’):&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/l8Up2rOYZomboTh06PZE0A_img_2.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A new feature branch is then checked out from ‘develop’ and the ticket status is updated to ‘IN PROGRESS’:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/l8Up2rOYZomboTh06PZE0A_img_3.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;complete-a-feature-git-flow-process&quot;&gt;Complete a feature git flow process&lt;/h4&gt;

&lt;p&gt;The command &lt;i&gt;mvn jgitflow:feature-finish&lt;/i&gt; ends the feature lifecycle.&lt;/p&gt;

&lt;p&gt;It prompts the user for the desired feature name to finish, where the default is the current branch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/l8Up2rOYZomboTh06PZE0A_img_4.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The feature branch is then merged into ‘develop’, and ‘develop’ is pushed.&lt;/p&gt;

&lt;p&gt;Before the merge, we like branch ‘develop’ to be pulled and the commits in the feature branch to be squashed, and so cleaner.&lt;/p&gt;

&lt;p&gt;To achieve that, we’ll add the followings configuration to jgit-flow plugin:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;pullDevelop&amp;gt;true&amp;lt;/pullDevelop&amp;gt;
&amp;lt;squash&amp;gt;true&amp;lt;/squash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/squash.png&quot; height=&quot;200&quot; width=&quot;160&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When the feature is done, we like to resolve it and pass to the QA guy. Hence, it’s resolution should be switched to ‘Done’, and it’s status ‘QA’
&lt;img src=&quot;http://fullgc.github.io/public/l8Up2rOYZomboTh06PZE0A_img_5.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;a-release-lifecycle&quot;&gt;A Release Lifecycle:&lt;/h3&gt;

&lt;p&gt;After all the features of the next version have been completed and merged to ‘develop’ branch, it’s time for the git flow release process to kick in.&lt;/p&gt;

&lt;h4 id=&quot;start-a-release-git-flow-process&quot;&gt;Start a release git flow process&lt;/h4&gt;

&lt;p&gt;A release process starts with the command &lt;i&gt;mvn jgitflow:release-start&lt;/i&gt; on branch ‘develop’, which prompts the user for the version name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/l8Up2rOYZomboTh06PZE0A_img_6.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The default is the next major version (according to the pom file), in this case, 1.2.0.
Then it performs the following actions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Pulls from the remote ‘develop’ branch (we’ve already configured).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Updates and commits the poms with the new version. This requires the following tag attribute:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;autoVersionSubmodules&amp;gt;true&amp;lt;/autoVersionSubmodules&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Checks out to the new ‘release’ branch, called release-VERSION (e.g. release-1.2.0).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pushes (this would trigger a release process of a ‘release candidate’ for QA machines. (The release processes will be described in the next section, ‘Pipeline’)&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;complete-a-release-git-flow-process&quot;&gt;Complete a release git-flow process&lt;/h4&gt;

&lt;p&gt;Once the version is approved by QA, the ‘git-flow’ release can be completed.
The command &lt;i&gt;mvn jgitflow:release-finish&lt;/i&gt; performs the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Merges the ‘release’ branch back into ‘master’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tags the ‘release’ with its name.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Back merges the ‘release’ into ‘develop’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Updates ‘develop’s poms with ‘&lt;next version=&quot;&quot;&gt;-SNAPSHOT'. (1.3-SNAPSHOT).&lt;/next&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Removes the ‘release’ branch.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Checkout and push ‘master’ branch would start the release process&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;a-hotfix-lifecycle&quot;&gt;A Hotfix Lifecycle&lt;/h3&gt;

&lt;p&gt;When there is a need for a quick fix for a code that is already in production, the ‘git-flow’ hotfix comes to the rescue.&lt;/p&gt;

&lt;h4 id=&quot;start-a-hotfix-git-flow-process&quot;&gt;Start a hotfix git flow process&lt;/h4&gt;

&lt;p&gt;The ‘master’ branch is always synced with the latest deployment code.
The Feature starts with the command &lt;i&gt;mvn jgitflow:hotfix-start&lt;/i&gt; prompts the user for the version name.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/public/l8Up2rOYZomboTh06PZE0A_img_7.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The default is the next minor version (according to the pom file), in this case, 1.2.1&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pulls from the remote ‘master’ branch (done by adding the configuration).&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;pullMaster&amp;gt;true&amp;lt;/pullMaster&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Updates and commits the poms with the new version.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Checks out to the new ‘hotfix’ branch, called hotfix-VERSION (e.g. release-1.2.1).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Pushes (like the stage that triggers a release of a hotfix candidate’ for QA machines).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;complete-a-release-git-flow-process-1&quot;&gt;Complete a release git-flow process&lt;/h4&gt;

&lt;p&gt;Once the version is approved by QA, the ‘hotfix’ git flow can be completed.
The command &lt;i&gt;mvn jgitflow:hotfix-finish&lt;/i&gt; performs actions which are quite similar to the ‘release-finish’:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Merges the ‘release’ branch back into ‘master’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tags the release with its name.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Back merges the release into ‘develop’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Restores poms version in ‘develop’ (the version is still 1.3-SNAPSHOT)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Removes the ‘release’ branch.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Checkout and push ‘master’ branch would start the release process&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;p&gt;We’ve reviewed the git workflow of a new feature, ‘release’ and ‘hotfix’, and ended up with the following ‘jgit-flow’ configuration:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;configuration&amp;gt;
    &amp;lt;flowInitContext&amp;gt;
         &amp;lt;masterBranchName&amp;gt;master&amp;lt;/masterBranchName&amp;gt;
         &amp;lt;developBranchName&amp;gt;develop&amp;lt;/developBranchName&amp;gt;
         &amp;lt;featureBranchPrefix&amp;gt;ST-&amp;lt;/featureBranchPrefix&amp;gt;
         &amp;lt;releaseBranchPrefix&amp;gt;release-&amp;lt;/releaseBranchPrefix&amp;gt;
         &amp;lt;hotfixBranchPrefix&amp;gt;hotfix-&amp;lt;/hotfixBranchPrefix&amp;gt;
         &amp;lt;versionTagPrefix&amp;gt;volcano&amp;lt;/versionTagPrefix&amp;gt;
    &amp;lt;/flowInitContext&amp;gt;
    &amp;lt;scmCommentPrefix&amp;gt;JgitFLow step: &amp;lt;/scmCommentPrefix&amp;gt;
    &amp;lt;pullDevelop&amp;gt;true&amp;lt;/pullDevelop&amp;gt;
    &amp;lt;pullMaster&amp;gt;true&amp;lt;/pullMaster&amp;gt;
    &amp;lt;squash&amp;gt;true&amp;lt;/squash&amp;gt;
    &amp;lt;autoVersionSubmodules&amp;gt;true&amp;lt;/autoVersionSubmodules&amp;gt;
&amp;lt;/configuration&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In &lt;a href=&quot;https://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-3&quot;&gt;part-3&lt;/a&gt; we’ll review the Jenkins Pipeline script, which compiles, runs the tests and performs the release process.&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
var disqus_config = function () {
this.page.url = &quot;https://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-3/&quot;
this.page.identifier = workflow-2
};
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://FullGC.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
</description>
        <pubDate>Tue, 11 Sep 2018 17:10:45 +0300</pubDate>
        <link>http://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-2/</link>
        <guid isPermaLink="true">http://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-2/</guid>
        
        <category>jira</category>
        
        <category>git-flow</category>
        
        <category>jgit-flow</category>
        
        <category>ci/cd</category>
        
        <category>Atlassian</category>
        
        
      </item>
    
      <item>
        <title>Manage development and delivery workflow with jGit-flow and Jenkins-Pipeline - Part 1</title>
        <description>&lt;p&gt;&lt;i&gt;This post is the first of a three parts series of articles about manage development and CI/CD workflow with jgit-flow and Pipeline&lt;/i&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-1&quot;&gt;Part-1: Tools and Planning&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-2&quot;&gt;Part-2: Git workflow with JGit-Flow&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-3&quot;&gt;Part-3: Development and delivery process with Jenkins Pipeline&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;As the team grows bigger, and the projects become more complex, proper development conventions, workflow and &lt;a href=&quot;https://en.wikipedia.org/wiki/CI/CD/&quot;&gt;CI/CD&lt;/a&gt; process become very important.
In this series of posts I’ll describe such flow and process, from the Jira ticket to the delivery (and deployment), using a popular stack, including Jira, Git, Maven, and Jenkins.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;part-1---tools-and-planning&quot;&gt;Part 1 - Tools and Planning&lt;/h2&gt;

&lt;p&gt;Let’s start with a quick review of the tools we’ll use for the workflow implementation&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jira&quot;&gt;&lt;strong&gt;Jira&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Jira_(software)&quot;&gt;Atlassian Jira&lt;/a&gt; is a popular proprietary issue tracking system.&lt;/p&gt;

&lt;p&gt;We’ll manipulate Atlassian Jira feature tickets along the flow. This can be skipped if you don’t use Jira.&lt;/p&gt;

&lt;p&gt;The project we’ll manage would be part of the Server team (ST) and the feature that we like to implement and deploy would be ST-145.&lt;/p&gt;

&lt;p&gt;Its initial ticket status is ‘open’, the resolution is ‘unresolved’:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/img/inital_task.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;gitflow&quot;&gt;&lt;strong&gt;GitFlow&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;GitFlow&lt;/a&gt; is a branching model for Git, created by Vincent Driessen.&lt;/p&gt;

&lt;p&gt;The GitFlow workflow defines a strict branching model designed around the project release. It uses the following branches:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Master: Stores the official release history. The origin/master is the main branch where the source code of HEAD always reflects a &lt;em&gt;production-ready&lt;/em&gt; state.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Develop: Serves as an integration branch for features&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Feature: Each new feature resides in its own branch. Feature branches use ‘develop’ as their parent branch. When a feature is complete, it gets merged back into ‘develop’&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Release: Supports preparation of a new production release.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Hotfix: When a critical bug in a production version must be resolved immediately, a ‘hotfix’ branch may be branched off from the corresponding tag on the ‘master’ branch that marks the production version.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’re new to git-flow, please take some time to read about it &lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;in Driessen’s post&lt;/a&gt; or in &lt;a href=&quot;https://www.atlassian.com/git/tutorials/comparing-workflows#!workflow-gitflow&quot;&gt;Atlassian’s Guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jgit-flow-maven-plugin&quot;&gt;&lt;strong&gt;Jgit-flow (Maven plugin)&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://bitbucket.org/atlassian/jgit-flow/wiki/Home&quot;&gt;JGit-Flow&lt;/a&gt; &lt;a href=&quot;https://mvnrepository.com/artifact/external.atlassian.jgitflow/jgitflow-maven-plugin&quot;&gt;maven plugin&lt;/a&gt; is a Java implementation of GitFlow, and like Jira, it was published by Atlassian. It designs for releasing a maven-based project and includes many other useful features.&lt;/p&gt;

&lt;p&gt;‘jGit-flow’ provides the following git-flow basic functionality:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://bitbucket.org/atlassian/jgit-flow/wiki/goals/feature-start&quot;&gt;jgitflow:feature-start&lt;/a&gt; Starts a feature branch&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://bitbucket.org/atlassian/jgit-flow/wiki/goals/feature-finish&quot;&gt;jgitflow:feature-finish&lt;/a&gt; Merges a feature branch&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://bitbucket.org/atlassian/jgit-flow/wiki/goals/release-start&quot;&gt;jgitflow:release-start&lt;/a&gt; Starts a release&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://bitbucket.org/atlassian/jgit-flow/wiki/goals/release-finish&quot;&gt;jgitflow:release-finish&lt;/a&gt; Merges a release&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://bitbucket.org/atlassian/jgit-flow/wiki/goals/hotfix-start&quot;&gt;jgitflow:hotfix-start&lt;/a&gt; Starts a hotfix&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://bitbucket.org/atlassian/jgit-flow/wiki/goals/hotfix-finish&quot;&gt;jgitflow:hotfix-finish&lt;/a&gt; Merges a hotfix&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each feature contains many attributes, providing very useful functionality (described in the links), that we’ll use later on.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jgit-flow-jira&quot;&gt;&lt;strong&gt;Jgit-flow-jira&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/FullGC/jgit-flow-jira&quot;&gt;JGit-Flow-Jira&lt;/a&gt; is a fork that I made for ‘jgit-flow’, which uses a Jira client to change the state of a Jira ticket during the lifecycle of a feature. Unfortunately, jgit-flow is not bug-free, and currently maintained mostly by the users and not by Atlassian. It is, however, published as open source and written very clearly. Jgitflow-jira contains a fix for this &lt;a href=&quot;https://ecosystem.atlassian.net/browse/MJF-109&quot;&gt;open bug&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;jenkinspipeline&quot;&gt;&lt;strong&gt;Jenkins(Pipeline)&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://jenkins.io/doc/book/pipeline/&quot;&gt;Jenkins Pipeline&lt;/a&gt; (or simply “Pipeline”) is a suite of plugins which supports implementing and integrating &lt;em&gt;continuous delivery pipelines&lt;/em&gt; into Jenkins.
&lt;img align=&quot;right&quot; src=&quot;/img/pipelinememe.png&quot; height=&quot;200&quot; width=&quot;150&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As opposed to the historic Gui-driven CI/CD tools for Jenkins jobs, the definition of a Pipeline is written into a text file (called a &lt;a href=&quot;https://jenkins.io/doc/book/pipeline/jenkinsfile&quot;&gt;Jenkinsfile&lt;/a&gt;) as a code. This in turn can be committed to a project’s source control repository.&lt;/p&gt;

&lt;p&gt;We will use Pipeline for build, tests and release.&lt;/p&gt;

&lt;p&gt;The Pipeline script would be written in Groovy and would use Jenkins syntax and shell commands.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;complete-development-release-and-deployment-plan&quot;&gt;&lt;strong&gt;Complete development, release and deployment plan&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The flow-chart below describes the entire workflow, from the Jira ticket to deployment, that we’ll learn how to implement in the following sections.&lt;/p&gt;

&lt;p&gt;We’ll review a development flow of a feature that was assigned to the ‘server team’ called ‘ST-145’, and the process of releasing and deploying the next version: v 1.2.0, of an application called ‘volcano’.&lt;/p&gt;

&lt;p&gt;There are many shapes and arrows in the graph, but there’s no need to make sense of them all right now, since we’re going to do exactly that in the following sections.&lt;img src=&quot;http://fullgc.github.io/public/l8Up2rOYZomboTh06PZE0A_img_1.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;
/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
var disqus_config = function () {
this.page.url = &quot;https://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-1/&quot;
this.page.identifier = workflow-1
};
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://FullGC.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
</description>
        <pubDate>Tue, 11 Sep 2018 17:05:45 +0300</pubDate>
        <link>http://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-1/</link>
        <guid isPermaLink="true">http://fullgc.github.io/manage-development-and-delivery-workflow-with-jgit-flow-and-jenkins-pipeline-part-1/</guid>
        
        <category>jira</category>
        
        <category>jenkins</category>
        
        <category>pipeline</category>
        
        <category>git-flow</category>
        
        <category>jgit-flow</category>
        
        <category>ci/cd</category>
        
        <category>release</category>
        
        <category>deployment</category>
        
        <category>maven</category>
        
        
      </item>
    
      <item>
        <title>How to tune Akka to get the most from your Actor-based system - Part 2</title>
        <description>&lt;p&gt;&lt;i&gt;This post is the second of a two parts series of articles on how to tune Akka configurations&lt;/i&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/how-to-tune-akka-to-get-the-most-from-your-actor-based-system-part-1&quot;&gt;Part-1: Initial Akka Configurations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/how-to-tune-akka-to-get-the-most-from-your-actor-based-system-part-2&quot;&gt;Part-2: Gather and analyze Akka metrics with Kamon and stackable traits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a href=&quot;https://fullgc.github.io/how-to-tune-akka-to-get-the-most-from-your-actor-based-system-part-1/&quot;&gt;Previously&lt;/a&gt;, we tried to adjust Akka configurations for some possible use cases. After we set up a configuration and have a system up and running, we’d like to know how well we did and “re-tune” the configuration where needed.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;part-2-gather-and-analyze-akka-metrics-with-kamon-and-stackable-traits&quot;&gt;Part-2: Gather and analyze Akka metrics with Kamon and stackable traits&lt;/h2&gt;

&lt;p&gt;This part focuses on Akka metrics, meaning a high-level data on the Akka Objects that we’ve configured (i.e. Dispatchers, Routes, Actors (Routees), and Messages). We will consider how we gather them at Inneractive and give some useful tips.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;monitoring-tools-for-akka&quot;&gt;&lt;strong&gt;Monitoring Tools for Akka&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;The Akka library does not include a native monitoring tool. However, there are a few tools that provide additional metrics for an Akka-based application (i.e. memory usage, trace information), profiling and further capabilities that help identify performance issues or identify a bottleneck.&lt;/p&gt;

&lt;p&gt;To name a few:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://developer.lightbend.com/docs/monitoring/2.0.x/home.html&quot;&gt;‘Lightbend Monitoring’ &lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;Provides all necessary features, including key Akka metrics and &lt;a href=&quot;https://developer.lightbend.com/docs/monitoring/2.0.x/instrumentations/akka/akka.html#span-tracer&quot;&gt;span traces&lt;/a&gt;.&lt;/p&gt;

    &lt;p&gt;Takipi plugin provides actor events that can trigger debug snapshots of the stack trace, i.e. the state at the time of the error. By the way… It’s not free…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://docs.newrelic.com/&quot;&gt;Newrelic&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;A powerful performance monitoring and management framework, with Spray and&lt;/p&gt;

    &lt;p&gt;Akka-Http instrumented features. However it’s most important feature, at least regarding our purpose, the &lt;a href=&quot;https://docs.newrelic.com/docs/apm/transactions/x-ray-sessions/introduction-x-ray-sessions&quot;&gt;X-ray&lt;/a&gt;, which gives deeper insight into key transactions, and is available only with a ‘Pro’ subscription.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Flame Graphs / VirtualVm or any other JVM profiling tool&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Kamon&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;kamon&quot;&gt;&lt;strong&gt;Kamon&lt;/strong&gt;&lt;/h3&gt;

&lt;h4 id=&quot;overview&quot;&gt;Overview&lt;/h4&gt;

&lt;p&gt;Kamon is an open source tool for monitoring applications running on the JVM. It supports various backends and has &lt;a href=&quot;http://kamon.io/documentation/get-started&quot;&gt;modules&lt;/a&gt; that integrate and gather metrics for Akka, Play, Spray/Akka-Http and more.&lt;/p&gt;

&lt;p&gt;Kamon uses &lt;a href=&quot;http://www.eclipse.org/aspectj/&quot;&gt;Aspectj&lt;/a&gt; to add a layer of code before and after a method is executed, and in this &lt;a href=&quot;https://en.wikipedia.org/wiki/Aspect-oriented_programming&quot;&gt;aspect- oriented&lt;/a&gt; fashion records metrics data (e.g. Records time before and after processing of messages/futures/routing (See &lt;a href=&quot;#appendix&quot;&gt;Appendix&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Here at Inneractive we use Kamon to gather all metrics, including application custom metrics, even in applications that do not use Akka, because it proves to perform better (CPU wise) than other alternatives.&lt;/p&gt;

&lt;p&gt;It contains metric types functionalities like .histogram(..), .counter(..), .gauge(..) and .minMaxCounter(..)&lt;/p&gt;

&lt;h4 id=&quot;configuration-for-kamon-akka-metrics&quot;&gt;Configuration for Kamon Akka metrics&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://kamon.io/documentation/kamon-akka/0.6.6/overview/&quot;&gt;Akka integration &lt;/a&gt;has a &lt;a href=&quot;http://kamon.io/documentation/kamon-akka/0.6.6/actor-router-and-dispatcher-metrics/&quot;&gt;collection of metrics&lt;/a&gt; for actor, router and dispatcher objects. Firstly, they are all collected in our Exchange server. Soon enough our monitoring tools, &lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt; and &lt;a href=&quot;https://www.datadoghq.com/dg/slpg/?utm_source=Advertisement&amp;amp;utm_medium=GoogleAdsNon1stTierBrand&amp;amp;utm_campaign=GoogleAdsNon1stTierBrand-Non1st&amp;amp;utm_content=Datadog&amp;amp;utm_keyword=%7Bkeyword%7D&amp;amp;utm_matchtype=%7Bmatchtype%7D&amp;amp;gclid=EAIaIQobChMI19CG9MjA1wIVEpMbCh1t0Q4dEAAYASAAEgLd4vD_BwE&quot;&gt;Datadog&lt;/a&gt; went down / froze because of a crazy load of metrics. The reason is that we have 1000 to 1500 Actor instances. The metrics’ names include the instance name (it is not a Tag as you might expect). We do have our own tags like ‘environment’ and ‘host’, and about ~600 Exchange instances. There you get the vast number of metrics that our monitors could not handle.&lt;/p&gt;

&lt;p&gt;In addition, the ‘aspect’ way of gathering metric’s data is quite expensive, performance wise.&lt;/p&gt;

&lt;p&gt;Our metric configuration looks as follows:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;metric&quot;: {
      &quot;filters&quot;: {
       &quot;akka-actor&quot;: {
         &quot;excludes&quot;: [&quot;**&quot;],
         &quot;includes&quot;: []
       },
       &quot;akka-dispatcher&quot;: {
         &quot;excludes&quot;: [],
         &quot;includes&quot;: [&quot;**&quot;]
       },
       &quot;akka-router&quot;: {
         &quot;excludes&quot;: [],
         &quot;includes&quot;: [&quot;**&quot;]
       },
       &quot;trace&quot;: {
         &quot;excludes&quot;: [],
         &quot;includes&quot;: [ &quot;**&quot;]
       }
     }
    ...
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you may notice, we exclude akka-actor, which means all routees metrics (time-in-mailbox, processing-time, mailbox-size), and gather metrics for actors ourselves. This is because:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Routees metrics outnumbered all the others combined, since we have lots of actor instances, and we desperately needed our monitors to be up and running…&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We don’t really mind about a single routee in pretty much all cases, so gathered information like average, sum, 95 can do the trick&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The metrics’ names are somewhat awkward (partially because the name of the routees is like $a $b… and naming them requires them to be created explicitly in the code)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;We know the names of our actors, and have a foothold in our own actor’s code; so we could easily gather metrics ourselves, and with a more concise information.
In addition, we wanted metrics about the messages, processing time and the time it took the
message to arrive.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;tips&quot;&gt;Tips&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;When you route manually, meaning when you don’t have a router, or whenever you have created the routees explicitly, you can give them names yourself(see &lt;a href=&quot;https://doc.akka.io/api/akka/2.0/akka/actor/ActorContext.html&quot;&gt;actorOf&lt;/a&gt; parameters).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Akka does not provide an API to know the size of the mailbox. Instead, you can monitor by:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Have a messages counter (like Kamon does)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Override the MessageQueue. Google it.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;configuration-for-kamon-akka-actorsystem&quot;&gt;Configuration for Kamon Akka ActorSystem&lt;/h4&gt;

&lt;p&gt;As stated, the aspectj operating by Kamon is quite expensive, even when excluding of all routees metrics. By default, Kamon uses the default-dispatcher. If you don’t set a default-dispatcher yourself, the threadpool size of the default-dispatcher will be the number of cores. In practice Kamon told us that about 75% of the running threads were Kamon’s..&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/kamon_the_rock.png&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can set a dispatcher for Kamon as follows:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&quot;internal-config&quot;: {
 &quot;akka&quot;: {
   &quot;actor&quot;: {
     &quot;default-dispatcher&quot;: {
       &quot;fork-join-executor&quot;: {
         &quot;parallelism-factor&quot;: 0.25,
         &quot;parallelism-max&quot;: 2,
         &quot;parallelism-min&quot;: 1
       }
     }
   }
 }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here we allow up to two threads (but even one would probably be enough), with a parallelism-factor of 0.25, meaning up to two threads when the machine has at least eight cores.
This does the job.&lt;/p&gt;

&lt;h4 id=&quot;appendix&quot;&gt;Appendix&lt;/h4&gt;

&lt;p&gt;class &lt;a href=&quot;https://github.com/kamon-io/kamon-akka/blob/master/kamon-akka-2.4.x/src/main/scala/kamon/akka/instrumentation/ActorMonitor.scala&quot;&gt;ActorMonitor.scala&lt;/a&gt; from the module kamon-akka&lt;/p&gt;

&lt;!-- HTML generated using hilite.me --&gt;
&lt;div style=&quot;background: #f0f0f0; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
109
110&lt;/pre&gt;&lt;/td&gt;&lt;td&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt; &lt;span style=&quot;color: #007020; font-weight: bold&quot;&gt;def&lt;/span&gt; processMessage&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;pjp&lt;span style=&quot;color: #007020; font-weight: bold&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #902000&quot;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;,&lt;/span&gt; envelopeContext&lt;span style=&quot;color: #007020; font-weight: bold&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #902000&quot;&gt;EnvelopeContext&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #007020; font-weight: bold&quot;&gt;:&lt;/span&gt; &lt;span style=&quot;color: #902000&quot;&gt;AnyRef&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;{&lt;/span&gt;
       &lt;span style=&quot;color: #007020; font-weight: bold&quot;&gt;val&lt;/span&gt; timestampBeforeProcessing &lt;span style=&quot;color: #007020; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;RelativeNanoTimestamp&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;now

      &lt;span style=&quot;color: #007020; font-weight: bold&quot;&gt;try&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;Tracer&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;withContext&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;envelopeContext&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;context&lt;span style=&quot;color: #666666&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;{&lt;/span&gt;
          pjp&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;proceed&lt;span style=&quot;color: #666666&quot;&gt;()&lt;/span&gt;
        &lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt;

      &lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt; &lt;span style=&quot;color: #007020; font-weight: bold&quot;&gt;finally&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;{&lt;/span&gt;
        &lt;span style=&quot;color: #007020; font-weight: bold&quot;&gt;val&lt;/span&gt; timestampAfterProcessing &lt;span style=&quot;color: #007020; font-weight: bold&quot;&gt;=&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;RelativeNanoTimestamp&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;now
        &lt;span style=&quot;color: #007020; font-weight: bold&quot;&gt;val&lt;/span&gt; timeInMailbox &lt;span style=&quot;color: #007020; font-weight: bold&quot;&gt;=&lt;/span&gt; timestampBeforeProcessing &lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt; envelopeContext&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;nanoTime
        &lt;span style=&quot;color: #007020; font-weight: bold&quot;&gt;val&lt;/span&gt; processingTime &lt;span style=&quot;color: #007020; font-weight: bold&quot;&gt;=&lt;/span&gt; timestampAfterProcessing &lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt; timestampBeforeProcessing

        actorMetrics&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;foreach &lt;span style=&quot;color: #666666&quot;&gt;{&lt;/span&gt; am &lt;span style=&quot;color: #007020; font-weight: bold&quot;&gt;=&amp;gt;&lt;/span&gt;
          am&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;processingTime&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;record&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;processingTime&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;nanos&lt;span style=&quot;color: #666666&quot;&gt;)&lt;/span&gt;
          am&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;timeInMailbox&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;record&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;timeInMailbox&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;nanos&lt;span style=&quot;color: #666666&quot;&gt;)&lt;/span&gt;
          am&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;mailboxSize&lt;span style=&quot;color: #666666&quot;&gt;.&lt;/span&gt;decrement&lt;span style=&quot;color: #666666&quot;&gt;()&lt;/span&gt;
        &lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt;
       &lt;span style=&quot;color: #666666&quot;&gt;...&lt;/span&gt;
      &lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt;
    &lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt;

&lt;span&gt;…&lt;/span&gt;
  &lt;span style=&quot;color: #666666&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/div&gt;

&lt;!-- HTML generated using hilite.me --&gt;
&lt;div style=&quot;background: #f0f0f0; overflow:auto;width:auto;border:solid gray;border-width:.1em .1em .1em .8em;padding:.2em .6em;&quot;&gt;&lt;pre style=&quot;margin: 0; line-height: 125%&quot;&gt;&lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;Line&lt;/span&gt; &lt;span style=&quot;color: #40a070&quot;&gt;83&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt; 'processMessage' executes 'around'&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;before and after&lt;span style=&quot;color: #666666&quot;&gt;)&lt;/span&gt; message processing by the actor&lt;span style=&quot;color: #666666&quot;&gt;(&lt;/span&gt;jpg&lt;span style=&quot;color: #666666&quot;&gt;,&lt;/span&gt; line &lt;span style=&quot;color: #40a070&quot;&gt;88&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;)&lt;/span&gt;
&lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;Line&lt;/span&gt; &lt;span style=&quot;color: #40a070&quot;&gt;84&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;Takes&lt;/span&gt; start time before the message being processed
&lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;Line&lt;/span&gt; &lt;span style=&quot;color: #40a070&quot;&gt;88&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;Invokes&lt;/span&gt; the method that handles message is processing
&lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;Lines&lt;/span&gt; &lt;span style=&quot;color: #40a070&quot;&gt;92&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #40a070&quot;&gt;94&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;Latency&lt;/span&gt; calculations
&lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;Lines&lt;/span&gt; &lt;span style=&quot;color: #40a070&quot;&gt;96&lt;/span&gt;&lt;span style=&quot;color: #666666&quot;&gt;-&lt;/span&gt;&lt;span style=&quot;color: #40a070&quot;&gt;99&lt;/span&gt; &lt;span style=&quot;color: #0e84b5; font-weight: bold&quot;&gt;Updates&lt;/span&gt; metrics cache
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;monitor-with-stackable-actor-traits&quot;&gt;&lt;strong&gt;Monitor with Stackable Actor Traits&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;We like to collect aggregated data for the routees and messages then.&lt;/p&gt;

&lt;p&gt;To monitor time-in-mailbox, processing-time, mailbox-size that we excluded from Kamon metric configuration, we need to monitor ‘around’ the message processing, i.e. around the ‘receive’ method&lt;/p&gt;

&lt;p&gt;It can be achieved by imitating Kamon’s usage of Aspectj as we just saw.
However, we use stackable-traits mixed to the Actors, for a monitoring layer around ‘receive’.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://fullgc.github.io/stackable-traits-pattern/&quot;&gt;I wrote about the stackable traits pattern&lt;/a&gt;. In &lt;a href=&quot;https://fullgc.github.io/stackable-traits-pattern---part-2/&quot;&gt;Part-2&lt;/a&gt; &lt;strong&gt;I described (a simplified version of) how we use stackable actor traits at Inneractive, with code samples.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;dashboard-overview&quot;&gt;&lt;strong&gt;Dashboard Overview&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Our dashboard consists of Kamon’s Akka metrics and custom metrics.&lt;/p&gt;

&lt;p&gt;Akka metrics collection is explained in detail in the &lt;a href=&quot;http://kamon.io/documentation/kamon-akka/0.6.6/actor-router-and-dispatcher-metrics/&quot;&gt;docs&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Among all metrics, put special attention to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;‘active-threads’ and ‘running-threads’, these give a very good view of your threads distribution so you can tune the dispatcher’s configuration if needed&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;‘pool-size’, when you set upper, lower and increment factor and not a fixed size. This tells you how many threads are allocated in the pool, in practice.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;‘processed-tasks’ - How busy is the executor, maybe more threads are needed&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;‘routing-time’ - indicates if the routing strategy fits.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Custom metrics - ‘time-in-mailbox by actor/message’ for routees. Maybe a specific message handling is causing the problem.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Custom metrics ‘message-start-process’ for routees. When the value is high, it can indicate that the receiver needs more resources or there are too many instances. This leads to lots of context-switches. An increase of the “throughput” parameter may help.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/img/dashboard.png&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h3&gt;

&lt;p&gt;Monitoring of the Akka objects plays an important and integral part of the tuning step (and is generally important for keeping track of the system behavior).
There are various tools and ways to do so, Kamon is friendly and recommended, and you can gather the metrics yourself.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;http://kamon.io/documentation/get-started/&quot;&gt;Kamon Documentation&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://github.com/kamon-io/kamon-akka&quot;&gt;Kamon-Akka repository&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;a href=&quot;https://fullgc.github.io/stackable-traits-pattern---part-2/&quot;&gt;Stackable Actor Traits&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
var disqus_config = function () {
this.page.url = &quot;https://fullgc.github.io/how-to-tune-akka-to-get-the-most-from-your-actor-based-system-part-2/&quot;
this.page.identifier = Akka-2
};
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://FullGC.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
</description>
        <pubDate>Wed, 25 Jul 2018 17:30:45 +0300</pubDate>
        <link>http://fullgc.github.io/how-to-tune-akka-to-get-the-most-from-your-actor-based-system-part-2/</link>
        <guid isPermaLink="true">http://fullgc.github.io/how-to-tune-akka-to-get-the-most-from-your-actor-based-system-part-2/</guid>
        
        <category>scala</category>
        
        <category>akka</category>
        
        <category>kamon</category>
        
        
      </item>
    
      <item>
        <title>How to tune Akka to get the most from your Actor-based system - Part 1</title>
        <description>&lt;p&gt;&lt;i&gt;This post is the first of a two parts series of articles about how to tune Akka configurations&lt;/i&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/how-to-tune-akka-to-get-the-most-from-your-actor-based-system-part-1&quot;&gt;Part-1: Initial Akka Configurations&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://fullgc.github.io/how-to-tune-akka-to-get-the-most-from-your-actor-based-system-part-2&quot;&gt;Part-2: Gather and analyze Akka metrics with Kamon and stackable traits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;At some point, whether it is during your new actor-based system planning, or after you have a prototype working, you’ll probably find yourself digging into the &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/scala/index.html&quot;&gt;Akka Docs&lt;/a&gt; to find the right combination of possibilities for routing, dispatcher, number of actors instances and so forth…
Depending on the complexity of your system and performance requirements, this could get tedious.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;part-1-initial-akka-configurations&quot;&gt;Part-1: Initial Akka Configurations&lt;/h2&gt;

&lt;p&gt;Let’s start with Akka configuration, specifically the configuration of &lt;a href=&quot;#heading=h.hhztx0701fu1&quot;&gt;actor-instances&lt;/a&gt;, &lt;a href=&quot;#heading=h.cuvgdmxiz64e&quot;&gt;routing strategy&lt;/a&gt; and &lt;a href=&quot;#heading=h.no1l9o35uyp0&quot;&gt;dispatchers &amp;amp; executors&lt;/a&gt;. Below is the relevant section of the application.conf&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; {
  akka {
    actor {
      akka.actor.deployment {
        /my-service {
           nr-of-instances = ???
           router = ???
           dispatcher = &quot;my-dispatcher&quot;
    }
  my-dispatcher {
    executor = ???
    type = ???
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;the-number-of-actor-instances&quot;&gt;&lt;strong&gt;The number of actor instances&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;I like to start by thinking about how many instances of an actor are suitable?&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; akka.actor.deployment {
    /my-service {
      nr-of-instances = ???
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The size may depend on other configurations like routing strategy, dispatcher, threadpool size and more. Nevertheless, the nr-of-actor ‘strategy’ can already be decided at this point.
Let’s review our options and use cases:&lt;/p&gt;

&lt;h4 id=&quot;single-instance-or--domain-actor&quot;&gt;Single instance (or- Domain actor)&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;A dedicated actor for low-priority side-effects like sending metrics, write to a log or to a cache and so forth.&lt;/li&gt;
  &lt;li&gt;A mutable, single-source that needs to be handled(Cache)&lt;/li&gt;
  &lt;li&gt;When you need to work sequentially for whatever reason&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;fixed-number-of-instances&quot;&gt;Fixed number of instances&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Instance per a copy of resource, or per a mutable resource&lt;/li&gt;
  &lt;li&gt;For sharding, i.e. when you manage a distributed key-value cache and want to shard the inputs, then you may want an actor to manage each shard&lt;/li&gt;
  &lt;li&gt;To execute tasks in parallel, and you don’t think you’ll need to manage &lt;a href=&quot;https://www.reactivemanifesto.org/glossary&quot;&gt;Back-Pressure&lt;/a&gt; nor to scale up&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;resizeable-number-of-instanceswhen-using-a-router&quot;&gt;Resizeable number of instances(when using a router)&lt;/h4&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;akka.actor.deployment {
  /parent/router {
    resizer {
      lower-bound = ???
      upper-bound = ???
      pressure-threshold = ???
      messages-per-resize = ???
      ...
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is possible to configure resizable routees (actor instances managed by a router).&lt;/p&gt;

&lt;p&gt;Routees can be added or removed dynamically, based on performance. You can configure specifically how much to scale up and down in case of unusual behavior.&lt;/p&gt;

&lt;h5 id=&quot;scale---back-pressure-diy&quot;&gt;Scale /  &lt;a href=&quot;https://www.reactivemanifesto.org/glossary&quot;&gt;Back-Pressure&lt;/a&gt; DIY!&lt;/h5&gt;

&lt;p&gt;When one component is struggling to keep-up, the entire system needs to respond in a sensible way.&lt;/p&gt;

&lt;p&gt;You’re might be somewhat familiar wit &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/scala/stream/index.html&quot;&gt;Akka-Streams&lt;/a&gt;, widely known as a framework that manages your back-pressure. It’s possible to imitate the general behavior by yourself.&lt;/p&gt;

&lt;p&gt;Let’s review some scenarios in which you may want to scale your routees:&lt;/p&gt;

&lt;h6 id=&quot;the-producerin-our-use-case-one-of-your-actors-can-produce-faster-than-the-received-consumeractor-or-any-other-source-can-handle&quot;&gt;&lt;em&gt;The producer(In our use case, one of your actors), can produce faster than the received consumer(actor or any other source) can handle.&lt;/em&gt;&lt;/h6&gt;
&lt;p&gt;&lt;img align=&quot;right&quot; src=&quot;/img/loaded.png&quot; height=&quot;290&quot; width=&quot;290&quot; /&gt;
 In this case you may:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Back-pressure the producer, i.e. reduce the number of producer’s routees.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add more consumers(routees…)!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Leave it. You don’t necessarily need to back-pressure. It may lead to a loss of messages (bounded mailbox) or running out of memory…&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img align=&quot;right&quot; src=&quot;/img/easy.png&quot; height=&quot;290&quot; width=&quot;290&quot; /&gt;&lt;/p&gt;
&lt;h6 id=&quot;the-consumer-is-faster-than-the-producer&quot;&gt;&lt;em&gt;The consumer is faster than the producer.&lt;/em&gt;&lt;/h6&gt;

&lt;p&gt;Here the consumer will block waiting for the next item.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Remove some consumers(routees…)!&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add more producers if your system can theoretically produce faster.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Leave it. Then you may not get the most from your machine.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;actor-per-request&quot;&gt;Actor per-request&lt;/h4&gt;
&lt;p&gt;&lt;img align=&quot;right&quot; src=&quot;/img/meeseeks.png&quot; height=&quot;100&quot; width=&quot;100&quot; /&gt;
&lt;span style=&quot;font-weight: 400;&quot;&gt;“&lt;/span&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;You press, you make a request, the &lt;/span&gt;&lt;/i&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Meeseeks_and_Destroy&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Meeseeks&lt;/span&gt;&lt;/i&gt;&lt;/a&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; fulfills the request, and then it stops existing”(&lt;/span&gt;&lt;/i&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Rick_Sanchez_(Rick_and_Morty)&quot;&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Rick Sanchez&lt;/span&gt;&lt;/i&gt;&lt;/a&gt;&lt;i&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;)&lt;/span&gt;&lt;/i&gt;&lt;/p&gt;

&lt;p&gt;Actor per request works very similarly. An instance is created for every request, process it and then it will be destroyed.&lt;/p&gt;

&lt;p&gt;You can configure Spray/Akka-HTTP to work in actor-per-request mode or do it yourself. However, it is not part of the Akka configuration, so I won’t go into too much detail. In a nutshell:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Easy to manage state in the actor, because the context is always of a specific request, hence you don’t have to maintain any mapping of State =&amp;gt; Request&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://techblog.net-a-porter.com/2013/12/ask-tell-and-per-request-actors/&quot;&gt;And here are some more insights&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that there is a context-switches overhead which could theoretically lead to memory issues&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;routing&quot;&gt;&lt;strong&gt;Routing&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;Akka provides “strategies” for the Akka router to define the workload distribution among actors.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;akka.actor.deployment {
    /my-service {
      router = ???
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;strategies-overview&quot;&gt;Strategies Overview&lt;/h4&gt;

&lt;p&gt;Let’s quickly review the the routing strategies&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Random&lt;/strong&gt; - Distributes messages randomly&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Round-Robin&lt;/strong&gt; - Distributes messages in sequence&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Smallest-Mailbox&lt;/strong&gt; - Sends the message to the smallest mailbox&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Broadcast&lt;/strong&gt; - Distributes every message to all routees.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Scatter-Gather-First&lt;/strong&gt; - Distributes every message to all routees. Only the first to respond will execute the task.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Tail-Chopping&lt;/strong&gt; - Sends the message to one, randomly picked, routee and then after a small delay to a second routee.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Consistent-hashing&lt;/strong&gt; - Uses consistent hashing to select a routee based on the sent message&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;In-Code&lt;/strong&gt; - Custom your own routing by routing it yourself&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;strategies-cheatsheet&quot;&gt;&lt;em&gt;Strategies Cheatsheet&lt;/em&gt;&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;http://fullgc.github.io/img/routingstrategies.jpg&quot; alt=&quot;image alt text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;*Can be solved by increasing the number of routees (which may cost in context-switches overhead)&lt;/p&gt;

&lt;p&gt;**As a replacement for ‘smallest mailbox’. Latency differences could be high among connections to remote actors)&lt;/p&gt;

&lt;p&gt;***The overhead depends on the task, whether it on the same machine or not&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;dispatchers-and-executors&quot;&gt;&lt;strong&gt;Dispatchers and Executors&lt;/strong&gt;&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;akka.actor.deployment {
    /my-service {
      dispatcher = ???
      type = ???
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Dispatchers are &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/java/dispatchers.html&quot;&gt;what makes Akka actors “tick”&lt;/a&gt;, means put messages in mailboxes and route them. In addition, they are also an implementation of ExecutionContext, means they can execute Runnables and so a Scala Future.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my-dispatcher {
  executor = ???
  throughput = ???
....
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;fork-join-executor&quot;&gt;Fork-Join-executor&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my-dispatcher {
  executor = &quot;fork-join-executor&quot;
....
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Java 7 introduced the Fork-Join executor.&lt;/p&gt;

&lt;p&gt;As the name suggests, it &lt;em&gt;forks&lt;/em&gt; a task into subtasks, each executed by a different thread, and &lt;em&gt;joined&lt;/em&gt; the results.&lt;/p&gt;

&lt;p&gt;There are two main characters that are worth mentioning here. According to &lt;a href=&quot;https://docs.oracle.com/javase/tutorial/essential/concurrency/forkjoin.html&quot;&gt;Oracle docs&lt;/a&gt; -&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;“It is designed for work that can be broken into smaller pieces recursively”.&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;Hence it is best for recursive problems - where a task can be broken into sub-tasks such that they would be executed in parallel and their results would be collected.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;“The fork/join framework is distinct because it uses a work-stealing algorithm. Worker threads that run out of things to do can steal tasks from other threads that are still busy”&lt;/em&gt;&lt;/p&gt;

    &lt;p&gt;Fork-Join shows better performance in most cases, compared to old Thread-Pool-Executor. It makes a better use of resources, since the idle threads can steal tasks from busier threads.
 However, there is a built-in danger here.&lt;/p&gt;

    &lt;p&gt;Regarding the first statement, when a ‘Fork’ is performed, we have multiple threads and each of them is responsible for running a task.
 From the second, when a thread is finished it can take another task. But what if he got stuck performing this task?
 The other threads will wait on the ‘Join’ at some point, which is a threads starvation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my-dispatcher {
  executor = &quot;fork-join-executor&quot;
  fork-join-executor {
    # Min number of threads to cap factor-based parallelism number to
    # Note that these threads will be created anyway on fork'
    # so try to avoid an unnecessary overhead.
    parallelism-min = ???
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = ???
    # This is NOT an upper bound on the total number of threads!
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = ???
....
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A common case is to use Fork-Join executor for future tasks inside an actor. Here, the dispatcher’s configuration of the actor should be considered as well. For example, the more threads you have for the actor, the more ‘future’ tasks will be performed, and you may want more threads for them.&lt;/p&gt;
&lt;h4 id=&quot;thread-pool-executor&quot;&gt;Thread-pool-executor&lt;/h4&gt;

&lt;p&gt;The old Java 5 executor for asynchronous task execution can still fit in some cases and without the Fork-Join overhead.&lt;/p&gt;

&lt;p&gt;While Fork-Join breaks the task for you, if you know how to break the task yourself, then your code should be already built as a minimal task, executed by a single thread, which fits a thread-pool-executor.&lt;/p&gt;

&lt;p&gt;The thread-pool executor is used by Akka Dispatcher and PinnedDispatcher.&lt;/p&gt;

&lt;p&gt;Dispatcher allows you to define ‘min’, ‘max’ and increase ‘factor’ / ‘fixed’ size for your thread pool.&lt;/p&gt;

&lt;p&gt;Thread-pool executor is used by akka Dispatcher and PinnedDispatcher.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Dispatcher&lt;/strong&gt; let you define min, max and increase factor / fixed size for your threadpool.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my-dispatcher {
  type = Dispatcher
  executor = &quot;thread-pool-executor&quot;
  thread-pool-executor {
    # Min number of threads to cap factor-based parallelism number to
    parallelism-min = ???
    # Parallelism (threads) ... ceil(available processors * factor)
    parallelism-factor = ???
    # Max number of threads to cap factor-based parallelism number to
    parallelism-max = ???
  }
....
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The key is to find the right balance for actor instances to work in parallel and use the threads as much as they are need so other actors and processes can work as well. It’s also true for the Fork-Join executor and needs to be quite accurate.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;PinnedDispatcher&lt;/strong&gt; dedicates a unique thread to each actor. This is usually not the pattern you want for the machine, given the limited resources. Hence, it makes sense for the actor to share a pool of threads. However, if your actor performs a preferred task, you won’t want its instances to share the pool.&lt;/p&gt;

&lt;p&gt;Do not use it if you have more instances than the number of cores in the machine.
It is also not recommended for Futures, because you’ll probably need more than 1 thread…&lt;/p&gt;

&lt;h4 id=&quot;affinity-pool-executor&quot;&gt;Affinity-pool-executor&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;my-dispatcher {
  executor = &quot;affinity-pool-executor&quot;
....
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This executor tries its best to have your actor instance always schedule with the same thread, which should increase throughput.&lt;/p&gt;

&lt;p&gt;This is recommended for a small number of actor instances, where you have much more instances than threads, it is just not possible.&lt;/p&gt;

&lt;h4 id=&quot;tips&quot;&gt;Tips&lt;/h4&gt;
&lt;p&gt;&lt;img align=&quot;right&quot; src=&quot;/img/dispatcher.jpg&quot; height=&quot;250&quot; width=&quot;250&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Don’t use the &lt;a href=&quot;https://doc.akka.io/docs/akka/2.5/scala/dispatchers.html&quot;&gt;Akka default dispatcher&lt;/a&gt; for your actorSystem, or for the actors themselves. Note that external Akka based frameworks use it as default, and you should configure a dedicated dispatcher for them as well.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Have a different dispatcher for each actor, and for Futures inside an actor.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Dispatchers have a ‘throughput’ parameter, which “&lt;em&gt;defines the maximum number of messages to be processed per actor before the thread jumps to the next actor”&lt;/em&gt; Setting It to a higher value than the default, 1, is likely to improve performance so long as it is not part of the Affinity-pool dispatcher, and your actors are generally not very busy (otherwise the lack of fairness can cause a high load in some mailboxes).&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Read &lt;a href=&quot;https://blog.scalac.io/improving-akka-dispatcher.html&quot;&gt;this terrific post in the ScalaC blog&lt;/a&gt;. It explains dispatcher’s internals in details.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h3 id=&quot;next&quot;&gt;&lt;strong&gt;Next&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;In &lt;a href=&quot;https://fullgc.github.io/how-to-tune-akka-to-get-the-most-from-your-actor-based-system-part-2&quot;&gt;Part-2&lt;/a&gt; I will show how we monitor and analyze our actor-based system.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Inneractive maintains an Exchange server, which, simply put, receives an advertisement for a mobile application
from Ad-Networks.
In fact, there are ~500 server instances at a given moment, dealing with ~10,000,000 Ad requests per  minute.
During the process, the Exchange server performs a real-time auction by going out (with scala.Future)
to multiple Ad-Networks (consumers).
This translates to ~150,000,000 transactions per minute.
The Exchange server is Akka-based and uses Spray as a server-side-HTTP. The entire flow is actor-based.
We use other Akka frameworks in other modules like Akka-Http and Akka Streams.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div id=&quot;disqus_thread&quot;&gt;&lt;/div&gt;
&lt;script&gt;

/**
*  RECOMMENDED CONFIGURATION VARIABLES: EDIT AND UNCOMMENT THE SECTION BELOW TO INSERT DYNAMIC VALUES FROM YOUR PLATFORM OR CMS.
*  LEARN WHY DEFINING THESE VARIABLES IS IMPORTANT: https://disqus.com/admin/universalcode/#configuration-variables*/
var disqus_config = function () {
this.page.url = &quot;https://fullgc.github.io/how-to-tune-akka-to-get-the-most-from-your-actor-based-system-part-1/&quot;
this.page.identifier = Akka-1
};
(function() { // DON'T EDIT BELOW THIS LINE
var d = document, s = d.createElement('script');
s.src = 'https://FullGC.disqus.com/embed.js';
s.setAttribute('data-timestamp', +new Date());
(d.head || d.body).appendChild(s);
})();
&lt;/script&gt;

&lt;noscript&gt;Please enable JavaScript to view the &lt;a href=&quot;https://disqus.com/?ref_noscript&quot;&gt;comments powered by Disqus.&lt;/a&gt;&lt;/noscript&gt;
</description>
        <pubDate>Wed, 25 Jul 2018 17:20:45 +0300</pubDate>
        <link>http://fullgc.github.io/how-to-tune-akka-to-get-the-most-from-your-actor-based-system-part-1/</link>
        <guid isPermaLink="true">http://fullgc.github.io/how-to-tune-akka-to-get-the-most-from-your-actor-based-system-part-1/</guid>
        
        <category>scala</category>
        
        <category>akka</category>
        
        
      </item>
    
  </channel>
</rss>
